min.js 為程式碼混淆的檔案
可經由 ->Closure Compiler Service UI 產生

如果修改的是egret引擎源碼，要使用egret make --egretversion 版號，才會編譯檔案

egret build 會依照相對資料夾底下的tsconfig重新編譯出.d.ts / .js / .min.js

build資料夾內無法用ts檔產生，修改後用檔案覆蓋的方式

-龍骨相關的東西並不是egret的東西，是改成egert的形狀後使用

引擎修改上主要以src資料夾內為主

tool 檔案內的東西，可以從node相關套件找到類似的，方便修改?

程式碼內的require()-算是舊的引入方式
應使用新標準的import方式-官網查?


egretProperties.json底下
	"modules"加入要載入的第三方庫
輸入 egret build -e ，egret引擎會自動幫你載入~


//創建第三方模塊
輸入egret create_lib (資料夾名稱)

您會發現剛剛創建的第三方庫項目和我們平時看到的Egret 項目結構是不同的，裡麵包含2個空文件夾bin、src、libs（如果沒有請自行加上），還有一個package.json跟tsconfig.json的配置文件。

如果需要引用到其他的第三方庫的代碼，請把引用到的庫文件（主要是.d.ts 文件）放到libs 目錄下，libs 下不要放其他除了.d.ts 外的其他.ts 文件。

將編寫好的ts檔案放入src資料夾內
(?) ->並打开 package.json，将3个文件写入到 files 下面，如果文件有先后依赖顺序，一定得注意顺序。

在命令行中輸入編譯命令 egret build (資料夾名稱)
之後在設定的路徑上就會有產生的檔案~ 匯入就由上面提到的載入方式

//----------------------------------------------
https://developer.egret.com/cn/article/index/id/172

準備第三方庫
第三方庫可以是標準的ts庫，也可是你在網上下載現成的js庫，或者是自己寫的js庫。

由於js與ts在語法結構上的差異，在ts中不能直接調用js庫的API，所以TypeScript團隊提供了一套虛構聲明語法，可以將現有代碼的API用頭文件的形式描述出來，擴展名為d.ts（d.ts命名會提醒編譯器該文件不需要編譯）。這套虛構定義語法，讓您不需要去實現函數體裡的代碼，類似的定義接口和抽像類。

幸運的是目前，大多數流行的js類庫已經由官方提供，或者由熱心的社區開發者提供了對應的d.ts文件。當然，如果沒有，您也可以自己編寫。這裡有篇教程講得很詳細，裡邊也包含一個龐大的d.ts庫，以及管理這些庫的方法：使用JS類庫。

另外，由於一些流行的js庫在快速更新，可能會有你找到的d.ts文件定義與js庫的版本替代而導致其中的API並沒有完全對應的問題。遇到這種情況，或者尋找對應版本的js庫，或者就需要您自己修改一下d.ts文件了。

有關具體修改方法，在對照原d.ts的基礎上，你可能還需要熟悉ts接口方面的語法，可以參考這裡：ts接口教程。